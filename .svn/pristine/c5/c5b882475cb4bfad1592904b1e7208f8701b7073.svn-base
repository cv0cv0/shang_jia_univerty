package com.rubu.util;

import android.support.annotation.Nullable;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

/**
 * 时间工具类
 */

public class TimeUtil {
    public final static String TIME_UNIT = "yyyyMMddHHmmss";
    public final static String TIME_UNIT_STR = "yyyy-MM-dd HH:mm:ss";
    public final static String TIME_UNIT_STR_9 = "yyyy-MM-dd&HH:mm:ss";
    public final static String TIME_UNIT_YEAR = "yyyy-MM-dd";
    public final static String TIME_UNIT_DAY = "yyyy/MM/dd";
    public final static String TIME_UNIT_HOUR_MINE = "HH:mm";
    public final static String TIME_UNIT_HOUR_MINE_SECOND = "mm:ss";
    public final static String TIME_UNIT_YEAR_month = "yyyy年MM月";
    public final static String TIME_UNIT_YEAR_CN = "yyyy年MM月dd日";
    public final static String TIME_UNIT_YEAR_CN_9 = "yyyy年MM月dd日 HH:mm:ss";

    public static String getCurrentTime() {
        return new SimpleDateFormat(TIME_UNIT_STR).format(new Date());
    }

    public static String getTime(long time) {
        Date date = new Date();
        date.setTime(time);
        return new SimpleDateFormat(TIME_UNIT_STR).format(date);
    }

    public static String getTimeHMS(long time) {
        Date date = new Date();
        date.setTime(time);
        return new SimpleDateFormat(TIME_UNIT_HOUR_MINE_SECOND).format(date);
    }

    public static String getDay(long time) {
        Date date = new Date();
        date.setTime(time);
        return new SimpleDateFormat(TIME_UNIT_YEAR).format(date);
    }

    public static String getHour(long time) {
        Date date = new Date();
        date.setTime(time);
        return new SimpleDateFormat(TIME_UNIT_HOUR_MINE).format(date);
    }

    /**
     * 获取当前时间的后一天时间
     */
    public static String getAfterDay() {
        //使用roll方法进行回滚到后一天的时间
        //cl.roll(Calendar.DATE, 1);
        //使用set方法直接设置时间值
        Calendar cl = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));
        //使用set方法直接设置时间值
        int currentDay = cl.get(Calendar.DATE);
        cl.set(Calendar.DATE, currentDay + 1);
        int year = cl.get(Calendar.YEAR);
        int month = cl.get(Calendar.MONTH) + 1;
        int day = cl.get(Calendar.DATE);
        String m = month > 10 ? String.valueOf(month) : ("0" + month);
        String d = day > 10 ? String.valueOf(day) : ("0" + day);
        return year + "年" + m + "月" + d + "日";
    }

    public static String getTimeUNITDAY(long time) {
        Date date = new Date();
        date.setTime(time);
        return new SimpleDateFormat(TIME_UNIT_DAY).format(date);
    }

    /**
     * 将yyyy-MM-dd HH:mm:ss 转换成long
     *
     * @param time
     * @return
     */
    public static long getTongTime(String time) {
        if (time == null) {
            time = TimeUtil.getCurrentTime();
        }
        try {
            return new SimpleDateFormat(TIME_UNIT_YEAR_CN).parse(time).getTime();
        } catch (ParseException e) {
            e.printStackTrace();
            return System.currentTimeMillis();
        }
    }

    /**
     * 将yyyy年MM月dd日 转成long
     *
     * @param time
     * @return
     */
    public static long getTongTime1(String time) {
        if (time == null) {
            time = TimeUtil.getCurrentTime();
        }
        try {
            return new SimpleDateFormat(TIME_UNIT_YEAR_CN_9).parse(time).getTime();
        } catch (ParseException e) {
            e.printStackTrace();
            return System.currentTimeMillis();
        }
    }

    /**
     * 获取今天24点时间
     *
     * @return
     */
    public static long getToday24Time() {
        String day = getDay(System.currentTimeMillis()) + " 23:59:59";
        try {
            return new SimpleDateFormat(TIME_UNIT_STR).parse(day).getTime();
        } catch (ParseException e) {
            return System.currentTimeMillis();
        }
    }

    public static long getToday48Time() {
        String day = getAfterDay() + " 23:59:59";
        try {
            return new SimpleDateFormat(TIME_UNIT_STR).parse(day).getTime();
        } catch (ParseException e) {
            return System.currentTimeMillis();
        }
    }

    public static String getDayCN() {
        Date date = new Date();
//        date.setDate(date.getDay() + 1);
        date.setTime(System.currentTimeMillis());
        return new SimpleDateFormat(TIME_UNIT_YEAR_CN).format(date);
    }

    public static String getDayCNAfterTomorrow() {
        Date date = new Date();
        long time = 172800000L;
        date.setTime(System.currentTimeMillis() + time);
        return new SimpleDateFormat(TIME_UNIT_YEAR_CN).format(date);
    }

    /**
     * 获取今日0点 long型
     *
     * @return
     */
    public static long getToday0Time() {
        long time = getToday24Time();
        long todayTime = 86400000L;
        return time - todayTime;
    }

    public static String getDayCNNextWeek() {
        Date date = new Date();
        long time = 604800000L;
        date.setTime(System.currentTimeMillis() + time);
        return new SimpleDateFormat(TIME_UNIT_YEAR_CN).format(date);
    }

    /**
     * 获取7天前的开始时间
     *
     * @return
     */
    public static String getDayBeforWeek() {
        Date date = new Date();
        long time = getToday24Time();
        long eightDayTime = 691200000L;
        date.setTime(time - eightDayTime);
        return new SimpleDateFormat(TIME_UNIT_STR).format(date);
    }

    public static String getDayCNNextMonth() {
        Date date = new Date();
        long time = 2592000000L;
        date.setTime(System.currentTimeMillis() + time);
        return new SimpleDateFormat(TIME_UNIT_YEAR_CN).format(date);
    }

    public static String getDayCNNextThreeMonth() {
        Date date = new Date();
        long time = 7776000000L;
        date.setTime(System.currentTimeMillis() + time);
        return new SimpleDateFormat(TIME_UNIT_YEAR_CN).format(date);
    }

    public static String getDayCNNextYear() {
        Date date = new Date();
        long time = 31536000000L;
        date.setTime(System.currentTimeMillis() + time);
        return new SimpleDateFormat(TIME_UNIT_YEAR_CN).format(date);
    }

    public static String getDayAndWeek() {
        final Calendar c = Calendar.getInstance();
        c.setTimeZone(TimeZone.getTimeZone("GMT+8:00"));
        String mMonth = String.valueOf(c.get(Calendar.MONTH) + 1);// 获取当前月份
        String mDay = String.valueOf(c.get(Calendar.DAY_OF_MONTH));// 获取当前月份的日期号码
        String mWay = String.valueOf(c.get(Calendar.DAY_OF_WEEK));
        if ("1".equals(mWay)) {
            mWay = "天";
        } else if ("2".equals(mWay)) {
            mWay = "一";
        } else if ("3".equals(mWay)) {
            mWay = "二";
        } else if ("4".equals(mWay)) {
            mWay = "三";
        } else if ("5".equals(mWay)) {
            mWay = "四";
        } else if ("6".equals(mWay)) {
            mWay = "五";
        } else if ("7".equals(mWay)) {
            mWay = "六";
        }
        return mMonth + "月" + mDay + "日" + "星期" + mWay;
    }

    /**
     * <pre>
     * 根据指定的日期字符串获取星期几
     * </pre>
     *
     * @param strDate 指定的日期字符串(yyyy-MM-dd 或 yyyy/MM/dd)
     * @return week
     * 星期几(MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY)
     */
    public static String getWeekByDateStr(String strDate) {
        int year = Integer.parseInt(strDate.substring(0, 4));
        int month = Integer.parseInt(strDate.substring(5, 7));
        int day = Integer.parseInt(strDate.substring(8, 10));

        Calendar c = Calendar.getInstance();

        c.set(Calendar.YEAR, year);
        c.set(Calendar.MONTH, month - 1);
        c.set(Calendar.DAY_OF_MONTH, day);

        String week = "";
        int weekIndex = c.get(Calendar.DAY_OF_WEEK);

        switch (weekIndex) {
            case 1:
                week = "星期天";
                break;
            case 2:
                week = "星期一";
                break;
            case 3:
                week = "星期二";
                break;
            case 4:
                week = "星期三";
                break;
            case 5:
                week = "星期四";
                break;
            case 6:
                week = "星期五";
                break;
            case 7:
                week = "星期六";
                break;
        }
        return week;
    }

    public static String castTime(String time) {
        SimpleDateFormat formatter = new SimpleDateFormat(TIME_UNIT);
        Date date = null;
        try {
            date = formatter.parse(time);
            return new SimpleDateFormat(TIME_UNIT_STR).format(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return time;
    }

    public static long TimeToLong(String time) {
        SimpleDateFormat formatter = new SimpleDateFormat(TIME_UNIT_STR);
        if (time == null) {
            time = TimeUtil.getCurrentTime();
        }
        long times = 0;
        try {
            Date date = formatter.parse(time);
            times = date.getTime();
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return times;
    }

    /**
     * 转成预约需要显示格式（带星期）
     *
     * @param time
     * @return
     */
    public static String castTimeEdit(String time) {
        SimpleDateFormat formatter = new SimpleDateFormat(TIME_UNIT_YEAR_CN);
        Date date = null;
        try {
            date = formatter.parse(time);
            return new SimpleDateFormat(TIME_UNIT_YEAR).format(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return time;
    }

    public static String[] castTime9(String time) {
        SimpleDateFormat formatter = new SimpleDateFormat(TIME_UNIT);
        Date date = null;
        try {
            date = formatter.parse(time);
            String dayAndTime = new SimpleDateFormat(TIME_UNIT_STR_9).format(date);
            return dayAndTime.split("&");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new String[]{time, ""};
    }

    /**
     * 将原格式时间转换成任何你需要的格式
     *
     * @param time
     * @param startType
     * @param returnType
     * @return
     */
    public static String castTime(@Nullable String time, String startType, String returnType) {
        SimpleDateFormat formatter = new SimpleDateFormat(startType);
        Date date = null;
        try {
            date = formatter.parse(time);
            return new SimpleDateFormat(returnType).format(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return time;
    }
}
