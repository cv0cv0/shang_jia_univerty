package flutter

import android.Manifest
import android.app.DownloadManager
import android.content.Context
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.os.Environment
import android.support.v4.app.ActivityCompat
import android.support.v4.content.ContextCompat
import io.flutter.app.FlutterActivity
import io.flutter.plugin.common.MethodCall
import io.flutter.plugin.common.MethodChannel
import io.flutter.plugins.GeneratedPluginRegistrant

class UniversityActivity : FlutterActivity() {
    private val channel = "shangjia.dongjian.com/channel"
    private val downloadManager by lazy(LazyThreadSafetyMode.NONE) {
        getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager
    }

    private lateinit var mCall: MethodCall
    private lateinit var mResult: MethodChannel.Result

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        GeneratedPluginRegistrant.registerWith(this)

        MethodChannel(flutterView, channel).setMethodCallHandler { call, result ->
            when (call.method) {
                "download" -> {
                    if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
                        download(call, result)
                    } else {
                        mCall = call
                        mResult = result
                        ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), 9)
                    }
                }
                else -> result.notImplemented()
            }
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        when (requestCode) {
            9 -> {
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    download(mCall, mResult)
                }
            }
            else -> super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        }
    }

    private fun download(call: MethodCall, result: MethodChannel.Result) {
        val request = DownloadManager.Request(Uri.parse(call.arguments.toString()))
                .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                .setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, "mobileqq_android.apk")
                .setMimeType("application/vnd.android.package-archive")
                .setTitle("mobileqq_android.apk")
                .setDescription("download complete can open")
        result.success(downloadManager.enqueue(request))
    }
}