package com.rubu.ui.act;

import android.content.Intent;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.rubu.R;
import com.rubu.adapter.FailReasonAdapter;
import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.model.Base;
import com.rubu.model.Order;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.pop.PopDialog;
import com.rubu.util.LoginUtil;
import com.rubu.util.TLog;
import com.rubu.view.AutoListView;

import butterknife.BindView;
import rx.Observer;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Created by liuhaizhu on 2017/3/6.
 */

public class OrderFailAct extends BaseActivity {
    // 返回
    @BindView(R.id.title_left)
    TextView mTitleLeft;
    // 标题
    @BindView(R.id.title)
    TextView mTitle;
    // 工单详情
    private Order mOrder;
    // 展示原因的列表
    @BindView(R.id.auto_list_reason)
    AutoListView mAutoListReason;
    // 确定按钮
    @BindView(R.id.btn_confirm)
    Button mBtnConfirm;

    // 失败原因的适配器
    private FailReasonAdapter mFailReasonAdapter;
    // 工单数据库列表主键
    private long order_title_id;
    // 提示确定的列表
    private PopDialog mPopDialog;

    @Override
    protected int getViewId() {
        return R.layout.act_order_fail;
    }

    @Override
    protected void initEvent() {
        mOrder = (Order) getIntent().getSerializableExtra("order");
        order_title_id = getIntent().getLongExtra("id", 0);
        mTitle.setText(R.string.order_failed);
        mTitleLeft.setText(R.string.back);
        mTitleLeft.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });
        mFailReasonAdapter = new FailReasonAdapter(mContext);
        mFailReasonAdapter.setFailReasonSelect(new FailReasonAdapter.FailReasonSelect() {
            @Override
            public void onFailReasonSelect() {
                mBtnConfirm.setBackgroundResource(R.drawable.bg_login_btn_shape);
            }
        });
        mAutoListReason.setAdapter(mFailReasonAdapter);

        mBtnConfirm.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mFailReasonAdapter.getSelectIndex() == -1) {
                    showToast("请选择原因");
                    return;
                }
                String reasons = FailReasonAdapter.REASON[mFailReasonAdapter.getSelectIndex()];
                int index = reasons.indexOf("（");
                final String reason = reasons.substring(0, index);
                String title = reasons.substring(index, reasons.length());
                TLog.i("reason" + reason);
                if (mFailReasonAdapter.getSelectIndex() < 3) {
                    // 跳转到下一个类
                    Intent intent = new Intent(mContext, OrderFailTimeActivity.class);
                    intent.putExtra("id", order_title_id);
                    intent.putExtra("order", mOrder);
                    intent.putExtra("reason", mFailReasonAdapter.getSelectIndex() + 1);
                    intent.putExtra("serviceOrderId", mOrder.getRows().get(0).getService_order_id());
                    startActivity(intent);
//                } else if (mFailReasonAdapter.getSelectIndex() == 3) {
//                    mPopDialog = new PopDialog(OrderFailAct.this);
//                    mPopDialog.setText(reason, "确认取消安装" + title, null);
//                    showPopDialog();
//                } else if (mFailReasonAdapter.getSelectIndex() == 4) {
//                    mPopDialog = new PopDialog(OrderFailAct.this);
//                    mPopDialog.setText("地址异常", "确认地址异常无法胜任此工单，请求总部改派？", null);
//                    showPopDialog();
                } else {
                    mPopDialog = new PopDialog(OrderFailAct.this);
                    mPopDialog.setText(reason, "确认" + title, null);
                    showPopDialog();
                }
            }
        });
    }

    private void showPopDialog(){
        mPopDialog.setOnDialogListener(new PopDialog.OnDialogListener() {
            @Override
            public void onIsConfirm(boolean is) {
                if (is) doAction("", "1", "", "", mFailReasonAdapter.getSelectIndex());
            }
        });
        mPopDialog.show(mTitle);
    }

    /**
     * 服务单号
     *
     * @return
     */
    private String getServiceOrderId() {
        String serviceOrderId = mOrder.getRows().get(0).getService_order_id();
        return serviceOrderId;
    }

    /**
     * 预约失败操作
     *
     * @param day             更新的日期
     * @param time            上午,下午,晚上
     * @param reserved_result 不用的参数
     * @param nextTime        下次时间
     * @param questIndex      问题的类型
     */
    private void doAction(String day, String time, String reserved_result, final String nextTime, final int questIndex) {
        Order.RowsBean rowsBean = mOrder.getRows().get(0);
        ReqJson reqJson = new ReqJson();
        reqJson.setProc(Constant.PROC_APP_ORDER_RESERVING_FAIL);
        reqJson.setUser_id(LoginUtil.getUserId(mContext));
        reqJson.setOrder_title_id(String.valueOf(order_title_id));
        reqJson.setParent_biz_order_id(rowsBean.getParent_biz_order_id());
        reqJson.setService_order_id(getServiceOrderId());
        reqJson.setFail_code(String.valueOf(mFailReasonAdapter.getSelectIndex() + 1));
        reqJson.setReserved_result(reserved_result);
        reqJson.setNext_resv_time(time);
        reqJson.setNext_resv_date(day);
        reqJson.setWorker_name(LoginUtil.getUserName(mContext));
        reqJson.setWorker_mobile(LoginUtil.getTel(mContext));
        reqJson.setHas_rows("no");
        reqJson.setCancel_launch(4);
        showProgressDialog("正在预约");
        mSubscription = ApiImp.get().action(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Base>() {
                    @Override
                    public void onCompleted() {
                    }

                    @Override
                    public void onError(Throwable e) {
                        dissmisProgressDialog();
                        showToast("网络不给力");
                    }

                    @Override
                    public void onNext(Base model) {
                        dissmisProgressDialog();
                        int flag = model.getResult().getOut_Flag();
                        if (flag == 0) {
                            Intent intent = new Intent(mContext, ActionResultAct.class);
                            intent.putExtra("action", Constant.PROC_APP_ORDER_RESERVING_FAIL);
                            intent.putExtra("id", order_title_id);
                            intent.putExtra("status", mOrder.getRows().get(0).getWorker_status());
                            intent.putExtra("nextTime", nextTime);
                            intent.putExtra("questIndex", questIndex);
                            startActivity(intent);
                            finish();
                        } else {
                            showToast(model.getResult().getOut_nszRtn());
                        }
                    }
                });
    }
}
