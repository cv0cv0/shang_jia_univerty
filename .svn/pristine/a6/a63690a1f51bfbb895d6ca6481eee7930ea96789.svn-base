package com.rubu.ui.act.register;

import android.content.Intent;
import android.os.CountDownTimer;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import com.rubu.R;
import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.model.Base;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.util.BitMapUtil;
import com.rubu.util.StringUtil;

import butterknife.BindView;
import butterknife.OnClick;
import rx.Observer;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Created by fly on 2017/3/2.
 */

public class RegisterAct extends BaseActivity {
    @BindView(R.id.title)
    TextView title;
    @BindView(R.id.edit_phone)
    EditText mEditPhone;
    @BindView(R.id.is_Check)
    ImageView mIVIsCheck;
    @BindView(R.id.btn_get_code)
    Button mBtnGetCode;
    @BindView(R.id.btn_next)
    TextView mTVNext;
    ReqJson reqJson;
    ;
    @BindView(R.id.edit_code)
    EditText mEditTextCode;

    private String mPhone;
    // 验证码输入状态（0: 没发送，1:正在发送）
    private int mCodeStatus = 0;

    @Override
    protected int getViewId() {
        return R.layout.activity_register;
    }

    @Override
    protected void initEvent() {
        title.setText("上家服务");
        mBtnGetCode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getCode(mEditPhone.getText().toString());
            }
        });
        mEditPhone.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                // 检查是手机号
                checkPhone(s.toString());
                Log.i("输入的手机号为:", s.toString());
                Log.i("输入的手机号长度为:", s.length() + "");

            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    /**
     * 判断手机号
     */
    private void checkPhone(String phone) {
        if (mCodeStatus != 0) {
            return;
        }
        BitMapUtil.setImg(StringUtil.isTel(phone), mIVIsCheck);
        if (phone.length() == 11) {
            // 设置发送验证码
            if (StringUtil.isTel(phone)) {
//            if (String.valueOf(phone.charAt(0)).equals("1")) {
                // 可以发送验证码
                mPhone = phone;
                mBtnGetCode.setEnabled(true);
                mBtnGetCode.setBackgroundResource(R.drawable.bg_login_btn_shape);
            } else {
                // 不可以发送验证码
                mBtnGetCode.setEnabled(false);
                mBtnGetCode.setBackgroundResource(R.drawable.bg_login_btn_shape_gray);
                // 不可下一步
                mTVNext.setEnabled(false);
                mTVNext.setBackgroundResource(R.drawable.bg_login_btn_shape_gray);
            }
        } else if (StringUtil.isEmpty(phone)) {
            // 输入框内容为0
            mIVIsCheck.setVisibility(View.GONE);
        } else {
            // 不可以发送验证码
            mBtnGetCode.setEnabled(false);
            mBtnGetCode.setBackgroundResource(R.drawable.bg_login_btn_shape_gray);
            // 不可下一步
            mTVNext.setEnabled(false);
            mTVNext.setBackgroundResource(R.drawable.bg_login_btn_shape_gray);
        }
    }


    @OnClick({R.id.btn_next, R.id.btn_login})
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.btn_next:
                checkCode(mEditPhone.getText().toString(), mEditTextCode.getText().toString());
                break;
            case R.id.btn_login:
                finish();
                break;
        }
    }


    private void getCode(String phone) {
        if (StringUtil.isEmpty(phone)) {
            showToast("请输入手机号");
            return;
        }
        if (!StringUtil.isTel(phone)) {
            showToast("手机号格式不正确");
            return;
        }
        reqJson = new ReqJson();
        reqJson.setProc(Constant.GET_CODE);
        reqJson.setS_bind_tel(phone);
        reqJson.setS_smss_code(" ");
        reqJson.setHas_rows("no");
        mSubscription = ApiImp.get().login(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Base>() {
                    @Override
                    public void onCompleted() {
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onNext(Base model) {

                        int flag = model.getResult().getOut_Flag();
                        if (flag == 0) {
                            mBtnGetCode.setEnabled(false);
                            mCountDownTimerSingIn.start();
                            showToast("发送验证码成功");
                            // 下一步
                            mTVNext.setEnabled(true);
                            mTVNext.setBackgroundResource(R.drawable.bg_login_btn_shape);
                        } else {
                            showToast(model.getResult().getOut_nszRtn());
                        }
                    }
                });
    }

    private void checkCode(String phone, final String msgCode) {
        if (StringUtil.isEmpty(phone)) {
            showToast("请输入手机号");
            return;
        }
        if (!StringUtil.isTel(phone)) {
            showToast("手机号格式不正确");
            return;
        }
        if (StringUtil.isEmpty(msgCode)) {
            showToast("请输入验证码");
            return;
        }
        reqJson = new ReqJson();
        reqJson.setProc(Constant.CHECK_CODE);
        reqJson.setS_bind_tel(phone);
        reqJson.setS_smss_code(msgCode);
        reqJson.setHas_rows("no");
        mSubscription = ApiImp.get().login(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Base>() {
                    @Override
                    public void onCompleted() {

                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onNext(Base model) {
                        int flag = model.getResult().getOut_Flag();
                        if (flag == 0) {
                            Intent intent = new Intent(mContext, RegisterSetPasswordAct.class);
                            intent.putExtra("phone", mPhone);
                            startActivity(intent);
                            finish();
                        } else {
                            showToast(model.getResult().getOut_nszRtn());
                        }
                    }
                });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mCountDownTimerSingIn.cancel();
    }

    CountDownTimer mCountDownTimerSingIn = new CountDownTimer(60000, 1000) {
        @Override
        public void onTick(long millisUntilFinished) {
            mBtnGetCode.setEnabled(false);
            mBtnGetCode.setBackgroundResource(R.drawable.bg_login_btn_shape_gray);
            mBtnGetCode.setText("重新发送" + millisUntilFinished / 1000 + "S");
            mCodeStatus = 1;
        }

        @Override
        public void onFinish() {
            mBtnGetCode.setEnabled(true);
            mBtnGetCode.setBackgroundResource(R.drawable.bg_login_btn_shape);
            mBtnGetCode.setText("重新发送");
            mCodeStatus = 0;
        }
    };

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
    }
}
