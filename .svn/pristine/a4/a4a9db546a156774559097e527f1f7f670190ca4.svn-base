package com.rubu.ui.act;

import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.rubu.R;
import com.rubu.adapter.AdditionalservicesListAdapter;
import com.rubu.adapter.ChangeGoodsListAdapter;
import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.event.EventCode;
import com.rubu.event.EventMessage;
import com.rubu.model.Base;
import com.rubu.model.Order;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.pop.AdditionalServicesPopDialog;
import com.rubu.util.LoginUtil;
import com.rubu.view.AutoListView;

import org.greenrobot.eventbus.EventBus;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import rx.Observer;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Created by liuhaizhu on 2017/3/12.
 */

public class ChangeServiceGoodsAct extends BaseActivity {
    @BindView(R.id.title_left)
    TextView mTitleLeft;
    @BindView(R.id.title)
    TextView mTitle;
    @BindView(R.id.list_view)
    AutoListView mListView;
    //附加服务列表
    @BindView(R.id.list_view_additional_services)
    AutoListView mAddServicrsListView;
    @BindView(R.id.tv_total_service_num)
    TextView mTvTotalServiceNum;
    @BindView(R.id.btn_next)
    Button mBtnNext;
    //附加服务的布局控制是否显示
    @BindView(R.id.additional_service_ll)
    LinearLayout additionalServiceLl;
    //申请空跑费的checkbox
    @BindView(R.id.checkbox_apply_kp_cost)
    CheckBox applyKpCostCB;
    private List<Order.Rows1Bean> mList;
    //附加服务的对象集合
    private List<Order.Rows4Bean> mServiceList;
    private List<Order.Rows1Bean> mList1 = new ArrayList<>();
    //被选中的附加服务的集合
    private List<Order.Rows4Bean> mSelectService = new ArrayList<>();
    private long order_title_id;
    private ChangeGoodsListAdapter mChangeGoodsListAdapter;

    //附加服务的适配器
    private AdditionalservicesListAdapter additionalservicesListAdapter;

    @Override
    protected int getViewId() {
        return R.layout.act_change_service_goods;
    }

    @Override
    protected void initEvent() {
        mList = (List<Order.Rows1Bean>) getIntent().getSerializableExtra("bean");
        mServiceList = (List<Order.Rows4Bean>) getIntent().getSerializableExtra("servicebean");
        if (mServiceList.size() == 0) {
            additionalServiceLl.setVisibility(View.GONE);
        }
        // 状态等于12的时候(退款,即不可调整服务,注释掉)
        for (int i = 0; i < mList.size(); i++) {
//            int getReceive_status = (int) Math.ceil(Double.valueOf(mList.get(i).getReceive_status()));
//            if (getReceive_status != 12) {
                mList1.add(mList.get(i));
//            }
        }
        order_title_id = getIntent().getLongExtra("id", 0);
        mChangeGoodsListAdapter = new ChangeGoodsListAdapter(mContext, mList1, mServiceList);
        mListView.setAdapter(mChangeGoodsListAdapter);
        order_title_id = getIntent().getLongExtra("id", 0);
        mTitleLeft.setText(R.string.back);
        mTitleLeft.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });
        mTitle.setText("服务调整");
        mChangeGoodsListAdapter.onOrderSelect(new ChangeGoodsListAdapter.IsHaveSelectOrder() {
            @Override
            public void orderSelect(Boolean flag) {
                additionalservicesListAdapter.notifyDataSetChanged();
                if (flag) {
                    mBtnNext.setBackgroundResource(R.drawable.bg_login_btn_shape);
                    if (mChangeGoodsListAdapter.getSelectList().size() != mList.size()) {
                        applyKpCostCB.setChecked(false);
                    }
                } else {
                    mBtnNext.setBackgroundResource(R.drawable.bg_login_btn_shape_gray);
                    applyKpCostCB.setChecked(false);
                }
            }
        });

        mBtnNext.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final List<Order.Rows1Bean> mList = mChangeGoodsListAdapter.getSelectList();
                if (mList.size() == 0) {
                    showToast("请选择调整的商品");
                    return;
                }
                AdditionalServicesPopDialog additionalServicesPopDialog = new AdditionalServicesPopDialog(ChangeServiceGoodsAct.this, mList, getService(), applyKpCostCB.isChecked());

                additionalServicesPopDialog.show(mBtnNext);
                additionalServicesPopDialog.setOnDialogListener(new AdditionalServicesPopDialog.OnDialogListener() {
                    @Override
                    public void onIsConfirm(boolean is) {
                        if (is) {
                            StringBuilder sb = new StringBuilder();
                            for (Order.Rows1Bean rows1Bean : mList) {
                                sb.append(rows1Bean.getOrder_sub_id()).append(",");
                            }
                            if (applyKpCostCB.isChecked()) {
                                takingOrder(sb.deleteCharAt(sb.length() - 1).toString(), 1);
                            } else {
                                takingOrder(sb.deleteCharAt(sb.length() - 1).toString(), 2);
                            }
                        }
                    }
                });
//                StringBuilder sb=new StringBuilder();
//                for(Order.Rows1Bean rows1Bean:mList){
//                  sb.append(rows1Bean.getOrder_sub_id()).append(",");
//                }
//                takingOrder(sb.deleteCharAt(sb.length()-1).toString());
            }
        });
        double num = 0;
        for (Order.Rows1Bean rows1Bean : mList) {
            num = num + rows1Bean.getService_count();
        }
        mTvTotalServiceNum.setText("共" + (int) num + "项服务");

        //设置附加服务适配器
        additionalservicesListAdapter = new AdditionalservicesListAdapter(mContext, mServiceList);
        mAddServicrsListView.setAdapter(additionalservicesListAdapter);

        //给申请空跑费的checkbox设置监听选择服务是不能选择空跑费
        applyKpCostCB.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (mChangeGoodsListAdapter.getSelectList().size() == 0) {
                    showToast("请选择调整的商品");
                    applyKpCostCB.setChecked(false);
                    return;
                }
                if (mChangeGoodsListAdapter.getSelectList().size() != mList.size()) {
                    showToast("未整单取消,不能申请空跑费");
                    applyKpCostCB.setChecked(false);
                    return;
                }
            }
        });
    }

    private void takingOrder(String id, int kpfflag) {
        ReqJson reqJson = new ReqJson();
        reqJson.setProc(Constant.PROC_APP_ORDER_SUB_LOAD);
        reqJson.setOrder_title_id(String.valueOf(order_title_id));
        // TODO: 2017/7/19 默认不申请空跑费
        reqJson.setIs_hurry_fee(0);
        reqJson.setHas_rows("no");
        reqJson.setOrder_sub_idStr(id);
        reqJson.setUser_id(LoginUtil.getUserId(mContext));
        showProgressDialog("正在调整");
        mSubscription = ApiImp.get().action(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Base>() {
                    @Override
                    public void onCompleted() {
                    }

                    @Override
                    public void onError(Throwable e) {
                        dissmisProgressDialog();
                        showToast("网络不给力");
                    }

                    @Override
                    public void onNext(Base model) {
                        dissmisProgressDialog();
                        showToast(model.getResult().getOut_nszRtn());
                        int flag = model.getResult().getOut_Flag();
                        if (flag == 0) {
                            EventMessage eventMessage = new EventMessage(EventCode.EVENT_ORDER_CHANGE, "");
                            EventBus.getDefault().post(eventMessage);
                            finish();
                        }
                    }
                });
    }

    private List<Order.Rows4Bean> getService() {
        mSelectService.clear();
        for (Order.Rows4Bean service : mServiceList
                ) {
            if (service.isCheck()) {
                mSelectService.add(service);
            }
        }
        return mSelectService;
    }
}
