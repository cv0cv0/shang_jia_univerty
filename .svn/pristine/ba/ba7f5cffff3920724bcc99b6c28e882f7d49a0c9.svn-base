package com.rubu.ui.act.mine;

import android.content.Intent;
import android.util.Log;
import android.view.View;
import android.widget.GridView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.rubu.R;
import com.rubu.adapter.QuestionImgAdapter;
import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.model.AlertReminderModel;
import com.rubu.model.QuestionDetialModel;
import com.rubu.model.ReminderDetailModel;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.ui.act.ActionPickAct;
import com.rubu.util.StringUtil;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.OnClick;
import rx.Observer;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Email 727320580@qq.com
 * Created by xika on 2017/9/8
 * Vwesion 1.0
 * Dsscription: 问题工单内容
 */

public class ReminderOrderDetialAct extends BaseActivity {
    @BindView(R.id.title)
    TextView mTitle;
    @BindView(R.id.title_left)
    TextView mTitleLeft;
    // 工单类型
    @BindView(R.id.tv_order_type)
    TextView mTVOrderType;
    // 工单数量
    @BindView(R.id.tv_service_num)
    TextView mTVServiceNum;
    // 主工单号
    @BindView(R.id.order_Title_Id)
    TextView mTVOrderTitleId;
    // 客户名字
    @BindView(R.id.name)
    TextView mTVName;
    // 客户电话
    @BindView(R.id.tel)
    TextView mTVTel;
    // 地址省市区
    @BindView(R.id.sheng_shi_qu)
    TextView mTVAdressSheng;
    // 地址详情
    @BindView(R.id.adress)
    TextView mTVAdress;
    // 催单记录布局 -----------------------
    // 描述
    @BindView(R.id.dercribe)
    TextView mTVDescribe;
    // 客服
    @BindView(R.id.service_name)
    TextView mTVServiceName;
    // 操作时间
    @BindView(R.id.operate_time)
    TextView mTVOperateTime;

    //  催单Id
    private int mReminderId;
    // 主工单号
    private Long mOrderTitleId;
    // 催单内容
    private ReminderDetailModel mData;


    @Override
    protected int getViewId() {
        return R.layout.act_reminder_order_detial;
    }

    @Override
    protected void initEvent() {
        // 客服工单ID
        this.mReminderId = getIntent().getIntExtra("ReminderId", 0);
        mTitle.setText("异常工单");
        mTitleLeft.setText(R.string.back);
        mTitleLeft.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
        getQuestionData();
    }

    @OnClick({R.id.confirm})
    public void onClick() {
        Intent intent = new Intent(mContext, ActionPickAct.class);
        this.mOrderTitleId = Long.valueOf(mData.getRows().get(0).getOrder_title_id());
        Log.i("主工单号:", "发送工单号:" + this.mOrderTitleId);
        intent.putExtra("id", this.mOrderTitleId);
        mContext.startActivity(intent);
        finish();
    }

    /**
     * 问题内容的数据
     */
    private void getQuestionData() {
        ReqJson reqJson = new ReqJson();
        reqJson.setProc(Constant.PROC_APP_REMINDER_DETAILS_LOAD);
        reqJson.setReminder_id(mReminderId);
        mSubscription = ApiImp.get().getReminderDetial(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<ReminderDetailModel>() {
                    @Override
                    public void onCompleted() {

                    }

                    @Override
                    public void onError(Throwable e) {
                        showToast("网络不给力");
                        e.printStackTrace();
                        Log.i("获取催单详情内容异常", e.toString());
                    }

                    @Override
                    public void onNext(ReminderDetailModel model) {
                        mData = model;
                        if (model.getResult().getOut_Flag() == 0) {
//                            // 1.基础信息
                            setBaseInfo(model);
                            // 2.催单记录内容
                            setQuestionRecord(model);
                        } else {
                            showToast(model.getResult().getOut_nszRtn());
                        }
                    }
                });
    }

    /**
     * 设置基础信息
     */
    private void setBaseInfo(ReminderDetailModel questionModel) {
        if (questionModel.getRows() != null) {
            // 工单类型
            if (!StringUtil.isEmpty(questionModel.getRows().get(0).getParent_wk_order_type())) {
                mTVOrderType.setText(questionModel.getRows().get(0).getParent_wk_order_type());
            } else {
                mTVOrderType.setText("暂无主工单号");
            }
            // 工单数量
            mTVServiceNum.setText("X" + questionModel.getRows().get(0).getOrder_sub_count());
            // 主工单号
            if (!StringUtil.isEmpty(String.valueOf(questionModel.getRows().get(0).getParent_wk_order_id()))) {
                String orderId = StringUtil.addPlace(questionModel.getRows().get(0).getParent_wk_order_id());
                mTVOrderTitleId.setText(orderId);
            } else {
                mTVOrderTitleId.setText("暂无主工单号");
            }
            // 客户电话
            if (!StringUtil.isEmpty(questionModel.getRows().get(0).getBuyer_name())) {
                mTVName.setText(questionModel.getRows().get(0).getBuyer_name());
            } else {
                mTVName.setText("暂无客户姓名");
            }
            // 客户手机号
            if (!StringUtil.isEmpty(questionModel.getRows().get(0).getBuyer_mobile())) {
                mTVTel.setText(questionModel.getRows().get(0).getBuyer_mobile());
            } else {
                mTVTel.setText("暂无客户手机号");
            }
            // 地址省市区/详细地址
            if (!StringUtil.isEmpty(questionModel.getRows().get(0).getBuyer_address())) {
                String adresses = questionModel.getRows().get(0).getBuyer_address();
                String[] adress = adresses.split(" ");
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < adress.length - 1; i++) {
                    sb.append(adress[i]).append(" ");
                }
                if (sb.length() > 1) {
                    sb.deleteCharAt(sb.length() - 1);
                }
                mTVAdressSheng.setText(sb);
                mTVAdress.setText(adress[adress.length - 1]);
            } else {
                mTVAdressSheng.setText("暂无省市区地址");
                mTVAdress.setText("暂无详细地址");
            }
        }
    }

    /**
     * 设置催单记录记录内容
     */
    private void setQuestionRecord(ReminderDetailModel questionModel) {
        // 设置描述
        if (!StringUtil.isEmpty(questionModel.getRows1().get(0).getRecord_massage())) {
            mTVDescribe.setText(questionModel.getRows1().get(0).getRecord_massage());
        } else {
            mTVDescribe.setText("暂无描述内容");
        }
        // 设置客服
        if (!StringUtil.isEmpty(questionModel.getRows1().get(0).getS_user_name())) {
            mTVServiceName.setText(questionModel.getRows1().get(0).getS_user_name());
        } else {
            mTVServiceName.setText("暂无客服名字");
        }
        if (!StringUtil.isEmpty(questionModel.getRows1().get(0).getRecord_times())) {
            mTVOperateTime.setText(questionModel.getRows1().get(0).getRecord_times());
        } else {
            mTVOperateTime.setText("暂无操作时间信息");
        }
    }


}
