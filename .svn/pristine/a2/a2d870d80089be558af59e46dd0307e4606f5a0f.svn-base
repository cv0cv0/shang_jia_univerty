package com.rubu;

import android.content.Intent;
import android.os.CountDownTimer;
import android.util.Log;

import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.constant.SharePerenceCode;
import com.rubu.model.Base;
import com.rubu.model.UserModel;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.ui.act.HomeAct;
import com.rubu.ui.act.login.LoginAct;
import com.rubu.ui.act.register.RegisterPersonalAbility;
import com.rubu.util.AESUtils;
import com.rubu.util.JsonUtil;
import com.rubu.util.LoginUtil;
import com.rubu.util.SPUtils;
import com.rubu.util.StringUtil;
import com.umeng.analytics.MobclickAgent;

import java.util.List;

import cn.jpush.android.api.JPushInterface;
import rx.Observer;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

public class MainActivity extends BaseActivity {

    @Override
    protected int getViewId() {
        return R.layout.activity_main;
    }

    /*
    * 欢迎页面的自动登陆操作
    * */
    @Override
    protected void initEvent() {
        SPUtils.put(mContext, "updateFlag", 0);
        /** 设置是否对日志信息进行加密, 默认false(不加密). 友盟返回数据之后*/
        MobclickAgent.enableEncrypt(true);//6.0.0版本及以后
        String phone = ((String) SPUtils.get(this, "phone", ""));
        String pwd = (String) SPUtils.get(this, "pwd", "");
        if (!StringUtil.isEmpty(phone) && !StringUtil.isEmpty(pwd)) {
            autoLogin(phone, AESUtils.decode(pwd));
        } else {
            mCountDownTimerSingIn.start();
        }
    }

    /*自动登录*/
    private void autoLogin(final String phone, final String decode) {
        ReqJson reqJson = new ReqJson();
        reqJson.setProc(Constant.LOGIN_PROC);
        reqJson.setS_bind_tel(phone);
        reqJson.setHas_rows("yes");
        reqJson.setVersion(Constant.APP_VERSION);
        reqJson.setPlatform("android");
        reqJson.setPassword(decode);
        reqJson.setAudience(JPushInterface.getRegistrationID(this));
        reqJson.setLogin_type("s");
        reqJson.setSmss_code("13188888888");
        mSubscription = ApiImp.get().login(Params.getNetWorkParams(reqJson)).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<Base>() {
            @Override
            public void onCompleted() {

            }

            @Override
            public void onError(Throwable e) {
                dissmisProgressDialog();
                showToast("网络不给力");
                mCountDownTimerSingIn.start();
            }

            @Override
            public void onNext(Base model) {
                dissmisProgressDialog();
                int flag = model.getResult().getOut_Flag();
                if (flag == 0) {
                    showToast("登录成功！");
                    SPUtils.put(mContext, "phone", phone);
                    SPUtils.put(mContext, "pwd", AESUtils.encode(decode));
                    List<UserModel> list = JsonUtil.jsonToArrayList(String.valueOf(model.getRows()), UserModel.class);
                    if (list != null && list.size() > 0) {
                        LoginUtil.info = list.get(0);
                        LoginUtil.saveInfo(mContext, list.get(0));
                        MobclickAgent.onProfileSignIn(phone);
                        // 保存7天的标志位
                        SPUtils.put(mContext, SharePerenceCode.SP_USER_PERSONAL_ABILITY_DAY_STATUE, list.get(0).getRe_time_limit_flag());
                        // 保存技师是否需要提醒工单
                        SPUtils.put(mContext, SharePerenceCode.SP_USER_IS_ACTIVITY_STATUE, list.get(0).getIs_remind());
                        startNewActivity(list.get(0).getRe_select_service_region());
                        finish();
                    }
                } else {
                    mCountDownTimerSingIn.start();
                }
            }
        });
    }

    private static final String TAG = "MainActivity";

    /**
     * 根据老用户是否重新设置个人能力相关信息来确认跳转的activity
     *
     * @param personal_statue --0:默认值，表示覆盖区域和服务能力都没有重新勾选过
     *                        --1:服务能力重新勾选过
     *                        --2:覆盖区域重新勾选过
     *                        --4:两都都勾选过了
     */
    private void startNewActivity(int personal_statue) {
        Log.d(TAG, "startNewActivity:" + personal_statue);
        if (personal_statue == 4) {
            gotoNewAty(HomeAct.class);
            SPUtils.put(this, SharePerenceCode.SP_USER_PERSONAL_ABILITY_STATUE, true);
        } else {
            /**
             * 承接能力
             */
            gotoNewAty(RegisterPersonalAbility.class);
            SPUtils.put(this, SharePerenceCode.SP_USER_PERSONAL_ABILITY_STATUE, false);
        }
    }


    CountDownTimer mCountDownTimerSingIn = new CountDownTimer(1400, 1000) {
        @Override
        public void onTick(long millisUntilFinished) {

        }

        @Override
        public void onFinish() {
            startActivity(new Intent(MainActivity.this, LoginAct.class));
            finish();
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mCountDownTimerSingIn.cancel();
        mCountDownTimerSingIn = null;
    }
}
