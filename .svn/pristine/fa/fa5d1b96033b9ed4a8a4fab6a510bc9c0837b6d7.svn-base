package com.rubu.util;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;

import java.util.Stack;

/**
 * Email 727320580@qq.com
 * Created by xika on 2017/4/15
 * Vwesion 1.0
 * Dsscription:  app中Activity的操作类
 */

public class AppClassManager {
    private static Stack<Activity> activityStack;

    private static AppClassManager instance;

    private AppClassManager() {
    }

    /**
     * 单一实例
     */
    public static AppClassManager getAppManager() {
        if (instance == null) {
            instance = new AppClassManager();
        }
        return instance;
    }

    public void closeAppClassManager(){
        if(instance!=null){
            instance=null;
        }
    }

    /**
     * 添加Activity到堆栈
     */
    public void addActivity(Activity activity) {
        if (activityStack == null) {
            activityStack = new Stack<Activity>();
        }
        activityStack.add(activity);

    }

    /**
     * 获取当前Activity（堆栈中最后一个压入的）
     */
    public Activity currentActivity() {
        Activity activity = activityStack.lastElement();
        return activity;
    }

    /**
     * 结束当前Activity（堆栈中最后一个压入的）
     */
    public void finishActivity() {
        Activity activity = activityStack.lastElement();
        finishActivity(activity);
    }

    /**
     * 结束指定的Activity
     */
    public void finishActivity(Activity activity) {
        if (activity != null) {
            // ConcurrentModificationException 异常
//            activityStack.remove(activity);
            activity.finish();
//            activity = null;
        }
    }

    /**
     * 结束指定类名的Activity
     */
    public void finishActivity(Class<?> cls) {
        for (Activity activity : activityStack) {
            if (activity.getClass().equals(cls)) {
                finishActivity(activity);
            }
        }
    }

    /**
     * 结束所有Activity
     */
    public void finishAllActivity() {
        for (int i = 0, size = activityStack.size(); i < size; i++) {
            if (null != activityStack.get(i)) {
                activityStack.get(i).finish();
            }
        }
        activityStack.clear();
    }
    /**
     * 结束除指定Activity外其他Activity
     */
    public void finishOtherActivity(Class<?> cls) {
        for (int i = 0, size = activityStack.size(); i < size; i++) {
            if (cls != activityStack.get(i).getClass()) {
                activityStack.get(i).finish();
            }
        }
    }
    /**
     * 打开在栈中指定类名activity
     */
    public void openActivity(Class<?> cls) {
        for (int i = 0, size = activityStack.size(); i < size; i++) {
            if (cls != activityStack.get(i).getClass()) {
                activityStack.get(i).finish();
            }
        }
    }


    /**
     * 退出应用程序
     */
    @SuppressWarnings("deprecation")
    public void AppExit(Context context) {
        try {
            finishAllActivity();
            ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
            activityManager.restartPackage(context.getPackageName());
            System.exit(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
