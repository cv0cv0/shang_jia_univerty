package com.rubu.ui.act;

import android.content.Intent;
import android.graphics.Color;
import android.support.v4.content.ContextCompat;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.rubu.R;
import com.rubu.adapter.FailReasonAdapter;
import com.rubu.adapter.SelectTimeAdapter;
import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.model.Base;
import com.rubu.model.Order;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.pop.PopDialog;
import com.rubu.util.LoginUtil;
import com.rubu.util.StringUtil;
import com.rubu.util.TLog;
import com.rubu.util.TimeUtil;
import com.rubu.view.AutoGridView;
import com.rubu.view.datepick.TimeSelector;

import butterknife.BindView;
import rx.Observer;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * 预约失败的时间调整
 */
public class OrderFailTimeActivity extends BaseActivity {
    // 返回
    @BindView(R.id.title_left)
    TextView mTitleLeft;
    // 标题
    @BindView(R.id.title)
    TextView mTitle;
    // 今天的年月日
    @BindView(R.id.tv_service_today_time)
    TextView mTvServiceTodayTime;
    // 显示下次预约的年月日
    @BindView(R.id.tv_select_day)
    TextView mTvSelectDay;
    // 上午,下午,晚上
    @BindView(R.id.grid_select_service_time)
    AutoGridView mGridSelectServiceTime;
    // 确定按钮
    @BindView(R.id.btn_confirm)
    Button mBtnConfirm;

    private Order mOrder;
    private long order_title_id;

    // 自定义的时间选择器
    TimeSelector mTimeSelector;
    // 提示确定的列表
    private PopDialog mPopDialog;

    private int mFailReasonFalg = 0;
    private String mServiceOrderId = "";

    @Override
    protected int getViewId() {
        return R.layout.activity_order_fail_time;
    }

    @Override
    protected void initEvent() {
        mOrder = (Order) getIntent().getSerializableExtra("order");
        order_title_id = getIntent().getLongExtra("id", 0);
        mFailReasonFalg = getIntent().getIntExtra("reason", 0);
        mServiceOrderId = getIntent().getStringExtra("serviceOrderId");
        mTitle.setText(R.string.order_failed);
        mTitleLeft.setText(R.string.back);
        mTitleLeft.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });
        setServiceTime();

        mBtnConfirm.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (StringUtil.isEmpty(mSelectDay)) {
                    showToast("请选择日期");
                    return;
                }
                if (selectTime == -1) {
                    showToast("请选择时间段");
                    return;
                }
                final String time = TimeUtil.castTimeEdit(mSelectDay);
                TLog.i("预约" + time);
                String reasons = FailReasonAdapter.REASON[mFailReasonFalg - 1];
                int index = reasons.indexOf("（");
                final String reason = reasons.substring(0, index);
                String title = reasons.substring(index, reasons.length());
                TLog.i("reason" + reason);
                if (mFailReasonFalg < 3) {
                    mPopDialog = new PopDialog(OrderFailTimeActivity.this);
                    mPopDialog.setText(reason, "确认下次预约时间为：", time + " " + mWeek + selectTimeStr + "  " + SELECT_TIMES_AREA[selectTime]);
                } else {
                    mPopDialog = new PopDialog(OrderFailTimeActivity.this);
                    mPopDialog.setText(reason, "确认" + title, null);
                }
                mPopDialog.setOnDialogListener(new PopDialog.OnDialogListener() {
                    @Override
                    public void onIsConfirm(boolean is) {
                        if (is)
                            doAction(time, String.valueOf(selectTime), "", time + selectTimeStr + "  " + SELECT_TIMES_AREA[selectTime], mFailReasonFalg);
                    }
                });
                mPopDialog.show(mTitle);
            }
        });
    }

    /**
     * 预约失败操作
     *
     * @param day             更新的日期
     * @param time            上午,下午,晚上
     * @param reserved_result 不用的参数
     * @param nextTime        下次时间
     * @param questIndex      问题的类型
     */
    private void doAction(String day, String time, String reserved_result, final String nextTime, final int questIndex) {
        Order.RowsBean rowsBean = mOrder.getRows().get(0);
        ReqJson reqJson = new ReqJson();
        reqJson.setProc(Constant.PROC_APP_ORDER_RESERVING_FAIL);
        reqJson.setUser_id(LoginUtil.getUserId(mContext));
        reqJson.setOrder_title_id(String.valueOf(order_title_id));
        reqJson.setParent_biz_order_id(rowsBean.getParent_biz_order_id());
        reqJson.setService_order_id(mServiceOrderId);
        reqJson.setFail_code(String.valueOf(questIndex));
        reqJson.setReserved_result(reserved_result);
        reqJson.setNext_resv_time(time);
        reqJson.setNext_resv_date(day);
        reqJson.setWorker_name(LoginUtil.getUserName(mContext));
        reqJson.setWorker_mobile(LoginUtil.getTel(mContext));
        reqJson.setHas_rows("no");
        reqJson.setCancel_launch(4);
        showProgressDialog("正在预约");
        mSubscription = ApiImp.get().action(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Base>() {
                    @Override
                    public void onCompleted() {
                    }

                    @Override
                    public void onError(Throwable e) {
                        dissmisProgressDialog();
                        showToast("网络不给力");
                    }

                    @Override
                    public void onNext(Base model) {
                        dissmisProgressDialog();
                        int flag = model.getResult().getOut_Flag();
                        if (flag == 0) {
                            Intent intent = new Intent(mContext, ActionResultAct.class);
                            intent.putExtra("action", Constant.PROC_APP_ORDER_RESERVING_FAIL);
                            intent.putExtra("id", order_title_id);
                            intent.putExtra("status", mOrder.getRows().get(0).getWorker_status());
                            intent.putExtra("nextTime", nextTime);
                            intent.putExtra("questIndex", questIndex);
                            startActivity(intent);
                            finish();
                        } else {
                            showToast(model.getResult().getOut_nszRtn());
                        }
                    }
                });
    }


    private String mSelectDay;
    private String mWeek;

    //上午  ：2017-09-08      下午：2017-09-08    晚上 2017-09-08
    private final String[] SELECT_TIMES = {"09:00:00", "15:00:00", "21:00:00"};
    //07：10─────12：59 \n下午   13：00─────18：59\n晚上   19：00─────23：59
    private final String[] SELECT_TIMES_AREA = {"07：10─12：59", "13：00─18：59", "19：00─23：59"};
    private int selectTime = -1;
    private String selectTimeStr;

    /**
     * 初始化今天的时间
     * 初始化上午,下午,晚上
     */
    private void setServiceTime() {
        // 初始化今天的日期
        mTvServiceTodayTime.setText("今天是" + TimeUtil.getDayAndWeek());
        // 初始化上午,下午,晚上
        SelectTimeAdapter selectTimeAdapter = new SelectTimeAdapter(mContext);
        selectTimeAdapter.setOnSelectTimeListener(new SelectTimeAdapter.OnSelectTimeListener() {
            @Override
            public void onSelectTime(int p, String text) {
                selectTime = p;
                selectTimeStr = text;
                mBtnConfirm.setBackgroundResource(R.drawable.bg_login_btn_shape);
            }
        });
        mGridSelectServiceTime.setAdapter(selectTimeAdapter);
        String nextTime = "";
        switch (mFailReasonFalg) {
            case 1:
                mSelectDay = TimeUtil.getAfterDay();
                mWeek = TimeUtil.getWeekByDateStr(mSelectDay);
                mTvSelectDay.setEnabled(false);
                mTvSelectDay.setBackgroundResource(R.drawable.bg_login_btn_shape);
                mTvSelectDay.setTextColor(Color.WHITE);
                mTvSelectDay.setText(mSelectDay + " " + mWeek);
                break;
            case 2:
                nextTime = TimeUtil.getDayCNNextWeek();
                Log.d("选择的事件", 2 + "");
                Log.d("选择的事件", nextTime);
                break;
            case 3:
                nextTime = TimeUtil.getDayCNNextThreeMonth();
                Log.d("选择的事件", 3 + "");
                Log.d("选择的事件", nextTime);
                break;
            default:
                nextTime = TimeUtil.getDayCNNextMonth();
                break;
        }
        // 点击选择日历
        final String finalNextTime = nextTime;
        mTvSelectDay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mTimeSelector == null) {
                    mTimeSelector = new TimeSelector(OrderFailTimeActivity.this, new TimeSelector.ResultHandler() {
                        @Override
                        public void handle(String time, String week) {
                            mSelectDay = time;
                            mWeek = week;
                            Log.d("选择的事件", "mSelectDay"+ mSelectDay);
                            Log.d("选择的事件", "mWeek"+ mWeek);
                            setSelectBtn();
                        }
                    }, TimeUtil.getAfterDay(), finalNextTime);
                }
                mTimeSelector.show(mTvSelectDay);
            }
        });
    }

    /**
     * 选择事件之后的样式改变
     */
    private void setSelectBtn() {
        if (!StringUtil.isEmpty(mSelectDay)) {
            mTvSelectDay.setBackgroundResource(R.drawable.bg_login_btn_shape);
            mTvSelectDay.setTextColor(Color.WHITE);
            mTvSelectDay.setText(mSelectDay + " " + mWeek);
        } else {
            mTvSelectDay.setBackgroundResource(R.drawable.bg_login_edit_shape);
            mTvSelectDay.setTextColor(ContextCompat.getColor(mContext, R.color.black));
            mTvSelectDay.setText(R.string.pls_select_time);
        }
    }

}
