package com.rubu.ui.act.register;

import android.content.Intent;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.rubu.R;
import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.constant.SharePerenceCode;
import com.rubu.model.AreaAbilityAppModel;
import com.rubu.model.Base;
import com.rubu.model.RegisterPersonalModel;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.ui.act.ActionResultAct;
import com.rubu.ui.act.register.adapter.RegisterAreaAbilityAdapter;
import com.rubu.ui.act.register.model.AreaChildModel;
import com.rubu.ui.act.register.model.AreaGroupModel;
import com.rubu.ui.act.register.model.AreaParentModel;
import com.rubu.util.LoginUtil;
import com.rubu.util.SPUtils;
import com.rubu.util.StringUtil;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.OnClick;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Email 727320580@qq.com
 * Created by xika on 2017/9/25
 * Vwesion 1.0
 * Dsscription:  覆盖能力 适配器
 */

public class RegisterAreaAbilityActivity extends BaseActivity {
    @BindView(R.id.title_left)
    TextView titleLeft;
    @BindView(R.id.title)
    TextView title;
    @BindView(R.id.hint)
    TextView mHint;
    @BindView(R.id.recycler_view)
    RecyclerView mRecyclerView;
    @BindView(R.id.btn_next)
    Button mBTNNext;

    // 选择的省 , 市
    private String mProvice, mCity;
    // 选择的街道数量， 总街道数量
    private int mSelectStreetCounts, mStreetCounts;
    RegisterAreaAbilityAdapter mAreaAdapter;

    // 原始数据
    private List<AreaAbilityAppModel> mDataList = new ArrayList<>();
    // 传入adapter的数据
    private List<AreaGroupModel> mItemList;
    // 传回来的数据
    private List<AreaGroupModel> mSelectList = new ArrayList<>();

    // 0表示从我的过来 ， 1从注册过来 ;
    private int mFlag = 0;

    @Override
    protected int getViewId() {
        return R.layout.activity_register_area_ability;
    }

    @OnClick({R.id.btn_next})
    public void onClick(View view) {
        switch (view.getId()) {
            // 覆盖能力下一步操作
            case R.id.btn_next:
                if (mSelectList != null && mSelectList.size() > 0) {
                    setServiceAbility(mSelectList);
                } else {
                    setServiceAbility(mItemList);
//                    finish();
                }
                break;
        }
    }

    @Override
    protected void initEvent() {
        // 1.初始化界面
        Intent intent = getIntent();
        mProvice = intent.getStringExtra("provice");
        mCity = intent.getStringExtra("city");
        mSelectStreetCounts = intent.getIntExtra("slectStreetCounts", 0);
        mStreetCounts = intent.getIntExtra("streetCounts", 0);
        mDataList = (List<AreaAbilityAppModel>) intent.getSerializableExtra("mAreaList");
        mFlag = getIntent().getIntExtra("register", 0);
        title.setText(getText(R.string.area_ability));
        titleLeft.setText(getText(R.string.back));
        titleLeft.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();
            }
        });
        if (StringUtil.isEmpty(mProvice) || (StringUtil.isEmpty(mCity))) {
            mHint.setText(mSelectStreetCounts + "/" + mStreetCounts);
        } else {
            mHint.setText(mProvice + " " + mCity + " " + mSelectStreetCounts + "/" + mStreetCounts);
        }
        if (mFlag == 0) {
            mBTNNext.setText("确认");
        }
        initData();
    }

    // 初始化需要的数据
    private void initData() {
        // 数据集合
        mItemList = new ArrayList<>();
        // 循环取出展示数据 (父数据)
        for (int i = 0; i < mDataList.size(); i++) {
            // 填充父数据
            AreaAbilityAppModel areaAbilityAppModel = mDataList.get(i);
            // 获取到每一个数据对象
            List<AreaAbilityAppModel.StreetBean> streetBeen = mDataList.get(i).getStreetBeanList();
            // adapter的数据对象
            AreaGroupModel groupModel = new AreaGroupModel();
            // 填充到数据对象的中间转换
            AreaParentModel parentModel = new AreaParentModel();
            List<AreaChildModel> children = new ArrayList<>();
            // 子数据(填充)
            for (int j = 0; j < streetBeen.size(); j++) {
                AreaChildModel childModel = new AreaChildModel();
                childModel.setStreet_id(streetBeen.get(j).getStreet_id());
                childModel.setStreet_name(streetBeen.get(j).getStreet_name());
                childModel.setSelect(streetBeen.get(j).isSelect());
                children.add(childModel);
            }
            // 父数据的填充
            parentModel.setRegionCode(areaAbilityAppModel.getRegionCode());
            parentModel.setArea(areaAbilityAppModel.getArea());
            parentModel.setSelect(areaAbilityAppModel.isSelect());
            parentModel.setSlectStreetCounts(areaAbilityAppModel.getSlectStreetCounts());
            parentModel.setAllStreetCounts(areaAbilityAppModel.getAllStreetCounts());
            parentModel.setShowGroup(areaAbilityAppModel.isGroup());
            // 数据转换
            groupModel.parent = parentModel;
            groupModel.children = children;
            // 数据添加
            mItemList.add(groupModel);
        }
        mAreaAdapter = new RegisterAreaAbilityAdapter(mItemList, mContext, mSelectStreetCounts);
        mRecyclerView.setLayoutManager(new LinearLayoutManager(mContext));
        mRecyclerView.setAdapter(mAreaAdapter);
        mAreaAdapter.setSelectlistener(new RegisterAreaAbilityAdapter.ISelectListener() {
            @Override
            public void onSelect(List<AreaGroupModel> list, int selectCounts) {
                mSelectList = list;
                mHint.setText(mProvice + " " + mCity + " " + selectCounts + "/" + mStreetCounts);
            }
        });
    }

    /**
     * 发送覆盖能力
     */
    private void setServiceAbility(List<AreaGroupModel> list) {
        String regionId = "", streetId = "";
        StringBuffer regionIdSb = new StringBuffer();
        StringBuffer streetIdSb = new StringBuffer();
        for (int i = 0; i < list.size(); i++) {
            for (AreaChildModel child : list.get(i).children) {
                if (child.isSelect()) {
                    regionIdSb.append(list.get(i).parent.getRegionCode()).append(",");
                    streetIdSb.append(child.getStreet_id()).append(",");
                }
            }
        }
        if (regionIdSb.length() > 0) {
            regionId = String.valueOf(regionIdSb.deleteCharAt(regionIdSb.length() - 1));
        }
        if (streetIdSb.length() > 0) {
            streetId = String.valueOf(streetIdSb.deleteCharAt(streetIdSb.length() - 1));
        }
        ReqJson reqJson = new ReqJson();
        reqJson.setProc(Constant.PROC_SET_REGISTER_AREA_ABILITY);
        reqJson.setS_worker_id(LoginUtil.getUserId(mContext));
        reqJson.setRegion_codeStr(regionId);
        reqJson.setStreet_idStr(streetId);
        reqJson.setHas_rows("yes");
        mSubscription = ApiImp.get().setRegisterAreaAbility(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Subscriber<RegisterPersonalModel>() {
                    @Override
                    public void onCompleted() {

                    }

                    @Override
                    public void onError(Throwable e) {
                        dissmisProgressDialog();
                        Log.i("上传覆盖能力失败原因", e.toString());
                        showToast("网络不给力");
                    }

                    @Override
                    public void onNext(RegisterPersonalModel registerPersonalModel) {
                        dissmisProgressDialog();
                        if (registerPersonalModel.getResult().getOut_flag() == 0) {
                            if (registerPersonalModel.getRows().get(0).getRe_select_service_region() == 4) {
                                SPUtils.put(mContext, SharePerenceCode.SP_USER_PERSONAL_ABILITY_STATUE, true);
                            }
                            Intent intent = new Intent(mContext, ActionResultAct.class);
                            intent.putExtra("action", Constant.PROC_SET_REGISTER_AREA_ABILITY);
                            startActivity(intent);
                            finish();
                        } else {
                            showToast(registerPersonalModel.getResult().getOut_nszRtn());
                        }
                    }
                });
    }

}
