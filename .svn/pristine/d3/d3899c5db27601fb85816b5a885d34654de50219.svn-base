package com.rubu.ui.act.register;

import android.content.Intent;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import com.rubu.R;
import com.rubu.base.BaseActivity;
import com.rubu.constant.Constant;
import com.rubu.model.RegisterModel;
import com.rubu.model.UserModel;
import com.rubu.net.ApiImp;
import com.rubu.net.Params;
import com.rubu.net.ReqJson;
import com.rubu.ui.act.ActionResultAct;
import com.rubu.ui.act.login.LoginAct;
import com.rubu.util.AESUtils;
import com.rubu.util.AppClassManager;
import com.rubu.util.BitMapUtil;
import com.rubu.util.LoginUtil;
import com.rubu.util.SPUtils;
import com.rubu.util.StringUtil;

import butterknife.BindView;
import butterknife.OnClick;
import rx.Observer;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/**
 * Email 727320580@qq.com
 * Created by xika on 2017/9/25
 * Vwesion 1.0
 * Dsscription:  注册设置密码
 */

public class RegisterSetPasswordAct extends BaseActivity {
    @BindView(R.id.title)
    TextView mTitle;
    @BindView(R.id.edit_password_first)
    EditText mETPassword;
    @BindView(R.id.edit_password_again)
    EditText mETPasswordAgain;
    @BindView(R.id.is_Check1)
    ImageView mIVPassword1;
    @BindView(R.id.is_Check2)
    ImageView mIVPassword2;
    @BindView(R.id.btn_next)
    Button mBTNNext;

    private String mPhone, mPassword1 = "", mPassword2 = "";

    @Override
    protected int getViewId() {
        return R.layout.activity_register_set_password;
    }

    @Override
    protected void initEvent() {
        mPhone = getIntent().getStringExtra("phone");
        mTitle.setText("密码设置");
        mETPassword.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                mPassword1 = s.toString();
                checkData();
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
        mETPasswordAgain.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                mPassword2 = s.toString();
                checkData();
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }

    @OnClick({R.id.btn_next, R.id.btn_login})
    public void onClick(View view) {
        switch (view.getId()) {
            // 下一步
            case R.id.btn_next:
                register();
                break;
            // 返回登录页
            case R.id.btn_login:
                finish();
                break;
        }
    }

    /**
     * 检查内容
     */
    private void checkData() {
        // 第一个密码为空
        if (StringUtil.isEmpty(mPassword1)) {
            mIVPassword1.setVisibility(View.GONE);
            // 不可点击
            setBTNNext(false);
        }
        // 第一个密码不为空
        if (!StringUtil.isEmpty(mPassword1)) {
            BitMapUtil.setImg(true, mIVPassword1);
        }
        // 第二个密码为空
        if (StringUtil.isEmpty(mPassword2)) {
            mIVPassword2.setVisibility(View.GONE);
            setBTNNext(false);
            return;
        }
        // 第二个密码不为空
        if (!StringUtil.isEmpty(mPassword2)) {
            // 判断两个密码不相同
            if (!mPassword1.equals(mPassword2)) {
                BitMapUtil.setImg(false, mIVPassword2);
                // 不可点击
                setBTNNext(false);
                return;
            }
            // 两次的密码相同
            if (mPassword1.equals(mPassword2)) {
                BitMapUtil.setImg(true, mIVPassword2);
                // 下一步可点击
                setBTNNext(true);
            }
        }
    }

    /**
     * 注册新方法
     */
    private void register() {
        showProgressDialog("正在注册...");
        ReqJson reqJson = new ReqJson();
        reqJson.setProc(Constant.REGISTER_NEXT);
        reqJson.setS_bind_tel(mPhone);
        reqJson.setPassword(mPassword1);
        mSubscription = ApiImp.get().register(Params.getNetWorkParams(reqJson))
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<RegisterModel>() {
                    @Override
                    public void onCompleted() {

                    }

                    @Override
                    public void onError(Throwable e) {
                        dissmisProgressDialog();
                        Log.i("注册错误信息", e.toString());
                        showToast("网络不给力");
                    }

                    @Override
                    public void onNext(RegisterModel model) {
                        // TODO: 2017/9/25 注册成功
                        int flag = model.getResult().getOut_Flag();
                        if (flag == 1) {
                            LoginUtil.clearInfo();
                            UserModel userModel = new UserModel();
                            userModel.setS_bind_tel(model.getRows().get(0).getS_bind_tel());
                            userModel.setS_user_id(model.getRows().get(0).getUser_id());
                            LoginUtil.saveInfo(mContext, userModel);
                            SPUtils.put(mContext, "phone", mPhone);
                            String password = AESUtils.encode(mPassword1);
                            SPUtils.put(mContext, "pwd", password);
                            Intent intent = new Intent(mContext, ActionResultAct.class);
                            intent.putExtra("action", Constant.REGISTER_NEXT);
                            startActivity(intent);
                            finish();
                        }
                    }
                });
    }

    /**
     * 设置按钮是否可以点击
     *
     * @param isEnabled
     */
    private void setBTNNext(boolean isEnabled) {
        if (isEnabled) {
            mBTNNext.setEnabled(true);
            mBTNNext.setBackgroundResource(R.drawable.bg_login_btn_shape);
        }
        if (!isEnabled) {
            mBTNNext.setEnabled(false);
            mBTNNext.setBackgroundResource(R.drawable.bg_login_btn_shape_gray);
        }
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
    }
}
